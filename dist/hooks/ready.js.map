{"version":3,"sources":["hooks/ready.ts"],"names":[],"mappings":"AAAA,OAAO,qBAAqB,yCAAsC;AAYlE,MAAM,QAAQ,GAAG,CAAC,QAAiB,EAAC,EAAE;IAEpC,IAAI,IAAI,GAAG,IAAI,cAAc,EAAE,CAAC;IAC5B,IAAI,CAAC,gBAAgB,CAAC,kBAAkB,CAAC,CAAC;IAC9C,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,iBAAiB,EAAE,IAAI,CAAC,CAAC,CAAC,uDAAuD;IAClG,IAAI,CAAC,kBAAkB,GAAG;QACpB,IAAI,IAAI,CAAC,UAAU,IAAI,CAAC,IAAI,IAAI,CAAC,MAAM,IAAI,GAAG,EAAE;YAC9C,2HAA2H;YAC3H,QAAQ,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;SAC7B;IACP,CAAC,CAAC;IACF,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AAClB,CAAC,CAAA;AAED,6BAA6B;AAC7B,MAAM,QAAQ,GAAG,KAAK,IAAsB,EAAE;IAC5C,IAAI,UAAyB,CAAC;IAE9B,QAAQ,CAAC,UAAU,QAAe;QAChC,UAAU,GAAI,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;IACrC,CAAC,CAAC,CAAA;IAEF,OAAO,UAAU,CAAC,IAAI,CAAC,MAAM,EAAE,GAAC,UAAU,CAAC,MAAM,GAAE,CAAC,CAAC,CAAC;AACxD,CAAC,CAAC;AAEF,MAAM,SAAS,GAAG,CAAC,GAAY,EAAE,EAAE;IACjC,OAAO;IACL,GAAG,CAAC,OAAO,CAAC,OAAO,CAAC,MAAM,EAAE,OAAO,CAAC;sDACc,GAAG,CAAC,MAAM,CAAC,IAAI;GAClE,CAAC;AACJ,CAAC,CAAC;AAEF,8BAA8B;AAC9B,MAAM,SAAS,GAAG,GAAS,EAAE;IAC3B,qBAAqB,EAAE,CAAC;IAExB,kBAAkB;IAClB,QAAQ,EAAE;SACP,IAAI,CAAC,CAAC,GAAY,EAAE,EAAE;QACrB,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,EAAE,IAAI,CAAC,CAAC;IACtD,CAAC,CAAC;SACD,KAAK,CAAC,GAAG,EAAE;QACV,sCAAsC;QACtC,OAAO,CAAC,IAAI,CAAC,uCAAuC,CAAC,CAAC;IACxD,CAAC,CAAC,CAAC;AACP,CAAC,CAAC;AAEF,eAAe,SAAS,CAAC","file":"ready.js","sourcesContent":["import registerNotifications from \"../notifications/Notification\";\n\ninterface Author {\n  name: string;\n}\n\ninterface TipJSON {\n  id: string;\n  author: Author;\n  message: string;\n}\n\nconst loadJSON = (callback:Function)=> {   \n\n  var xobj = new XMLHttpRequest();\n      xobj.overrideMimeType(\"application/json\");\n  xobj.open('GET', '../lang/en.json', true); // Replace 'appDataServices' with the path to your file\n  xobj.onreadystatechange = function () {\n        if (xobj.readyState == 4 && xobj.status == 200) {\n          // Required use of an anonymous callback as .open will NOT return a value but simply returns undefined in asynchronous mode\n          callback(xobj.responseText);\n        }\n  };\n  xobj.send(null);  \n}\n\n// fetches a tip from the API\nconst fetchTip = async (): Promise<TipJSON> => {\n  let parsedJSON:Array<TipJSON>;\n  \n  loadJSON(function (response:string) {\n    parsedJSON =  JSON.parse(response);\n  })\n\n  return parsedJSON[Math.random()*parsedJSON.length |0];\n};\n\nconst formatTip = (tip: TipJSON) => {\n  return `<h2>Did you know?</h2>\n  ${tip.message.replace(/\\\\n/g, \"<br/>\")}\n  <div class=\"didyouknow author\"><span class=\"name\">${tip.author.name}</span></div>\n  `;\n};\n\n// displays a fetched tip once\nconst onceReady = (): void => {\n  registerNotifications();\n\n  // fetch a new tip\n  fetchTip()\n    .then((tip: TipJSON) => {\n      window.vtta.notification.show(formatTip(tip), null);\n    })\n    .catch(() => {\n      // eslint-disable-next-line no-console\n      console.warn(\"Unabled to display tip, fetch failed.\");\n    });\n};\n\nexport default onceReady;\n"]}