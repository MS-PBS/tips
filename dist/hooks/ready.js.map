{"version":3,"sources":["hooks/ready.ts"],"names":[],"mappings":"AAAA,OAAO,qBAAqB,yCAAsC;AAYlE,8CAA8C;AAE9C,qCAAqC;AACrC,mDAAmD;AACnD,+CAA+C;AAC/C,4CAA4C;AAC5C,4DAA4D;AAC5D,wIAAwI;AACxI,yCAAyC;AACzC,YAAY;AACZ,OAAO;AACP,uBAAuB;AACvB,IAAI;AAEJ,6BAA6B;AAC7B,MAAM,QAAQ,GAAG,KAAK,IAAsB,EAAE;IAC5C,IAAI,UAAyB,CAAC;IAC9B,8CAA8C;IAC9C,6CAA6C;IAC7C,KAAK;IACL,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;IACxB,OAAO,EAAC,IAAI,EAAC,GAAG,EAAE,QAAQ,EAAC,EAAC,MAAM,EAAC,MAAM,EAAC,EAAE,SAAS,EAAE,OAAO,EAAC,CAAC;AAClE,CAAC,CAAC;AACF,0CAA0C;AAC1C,EAAC,8EAA8E,EAAC;AAChF,MAAM,SAAS,GAAG,CAAC,GAAG,EAAE,EAAE;IACxB,OAAO,OAAO,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,iBAAiB,CAAC;EACnD,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,cAAc,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,MAAM,CAAC,EAAE,CAAC;CAC1H,CAAC;AACF,CAAC,CAAC;AAEF,8BAA8B;AAC9B,MAAM,SAAS,GAAG,GAAS,EAAE;IAC3B,qBAAqB,EAAE,CAAC;IAExB,kBAAkB;IAClB,QAAQ,EAAE;SACP,IAAI,CAAC,CAAC,GAAY,EAAE,EAAE;QACrB,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,EAAE,IAAI,CAAC,CAAC;IACtD,CAAC,CAAC;SACD,KAAK,CAAC,GAAG,EAAE;QACV,sCAAsC;QACtC,OAAO,CAAC,IAAI,CAAC,sCAAsC,CAAC,CAAC;IACvD,CAAC,CAAC,CAAC;AACP,CAAC,CAAC;AAEF,eAAe,SAAS,CAAC","file":"ready.js","sourcesContent":["import registerNotifications from \"../notifications/Notification\";\n\ninterface Author {\n  name: string;\n}\n\ninterface TipJSON {\n  id: string;\n  author: Author;\n  message: string;\n}\n\n// const loadJSON = (callback:Function)=> {   \n\n//   var xobj = new XMLHttpRequest();\n//       xobj.overrideMimeType(\"application/json\");\n//   xobj.open('GET', '../lang/en.json', true);\n//   xobj.onreadystatechange = function () {\n//         if (xobj.readyState == 4 && xobj.status == 200) {\n//           // Required use of an anonymous callback as .open will NOT return a value but simply returns undefined in asynchronous mode\n//           callback(xobj.responseText);\n//         }\n//   };\n//   xobj.send(null);  \n// }\n\n// fetches a tip from the API\nconst fetchTip = async (): Promise<TipJSON> => {\n  let parsedJSON:Array<TipJSON>;\n  // loadJSON(async function (response:string) {\n  //   parsedJSON = await JSON.parse(response);\n  // })\n  console.log(parsedJSON);\n  return {\"id\":\"0\", \"author\":{\"name\":\"test\"}, \"message\": \"test2\"};\n};\n// ${tip.message.replace(/\\\\n/g, \"<br/>\")}\n{/* <div class=\"didyouknow author\"><span class=\"name\">${tip.id}</span></div> */}\nconst formatTip = (tip) => {\n  return `<h2>${game.i18n.localize(\"TIPS.didyouknow\")}</h2>\n${game.i18n.localize(`TIPS.hints.${Math.floor(Math.random()*Object.keys(game.i18n.translations[\"TIPS\"][\"hints\"]).length)}`)}\n`;\n};\n\n// displays a fetched tip once\nconst onceReady = (): void => {\n  registerNotifications();\n\n  // fetch a new tip\n  fetchTip()\n    .then((tip: TipJSON) => {\n      window.vtta.notification.show(formatTip(tip), null);\n    })\n    .catch(() => {\n      // eslint-disable-next-line no-console\n      console.warn(\"Unable to display tip, fetch failed.\");\n    });\n};\n\nexport default onceReady;\n"]}